#+TITLE: Dotfiles
#+AUTHOR: Sam Anderson
#+DATE: [2017-08-07 Mon]
#+STARTUP: contents

* New Machine Setup
** Mac
*** Install Homebrew
    #+BEGIN_SRC sh
/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
    #+END_SRC

*** Add Homebrew Taps
    #+BEGIN_SRC sh
brew tap homebrew/versions
brew tap caskroom/cask
brew tap caskroom/versions
brew tap railwaycat/emacsmacport
    #+END_SRC

*** Install Homebrew Packages
    Get the currently installed brew packages on this system.

    #+NAME: list-packages
    #+BEGIN_SRC sh :results output
/usr/local/bin/brew ls
    #+END_SRC

    #+NAME: brew-packages
    #+RESULTS: list-packages
    #+begin_example
   autoconf
   automake
   autossh
   bchunk
   cloog
   cmake
   cscope
   diff-so-fancy
   direnv
   elixir
   emacs-mac
   erlang
   exercism
   ffmpeg
   fish
   fzf
   gdbm
   gettext
   gmp
   gmp@4
   gnutls
   gradle
   icu4c
   isl
   isl@0.12
   jemalloc
   jpeg
   jrnl
   lame
   leiningen
   libevent
   libffi
   libgcrypt
   libgpg-error
   libmpc
   libpng
   libssh2
   libtasn1
   libtermkey
   libtiff
   libtool
   libunistring
   libuv
   libvo-aacenc
   libvterm
   libxml2
   libyaml
   lua
   mariadb
   md5sha1sum
   mercurial
   mpfr
   msgpack
   mtr
   ncurses
   neovim
   nettle
   node
   openssl
   ossp-uuid
   p11-kit
   pandoc
   pcre
   pcre2
   pkg-config
   pyenv
   pyenv-virtualenv
   python
   python3
   rbenv
   readline
   rtmpdump
   ruby
   ruby-build
   rust
   sqlite
   terminal-notifier
   texinfo
   the_silver_searcher
   thefuck
   tmux
   tree
   unibilium
   vim
   watchman
   wxmac
   x264
   xvid
   xz
   yarn
    #+end_example

    Install current packages on a new machine.

    #+BEGIN_SRC sh :var PACKAGES=brew-packages :results output
/usr/local/bin/brew install $PACKAGES
    #+END_SRC

*** Change Login Shell
    #+BEGIN_SRC sh :dir /sudo:: :results silent
chsh -s /usr/local/bin/fish $(whoami)
    #+END_SRC

* Fish
  :PROPERTIES:
  :header-args: :mkdirp yes
  :END:

** Config
   :PROPERTIES:
   :header-args: :tangle ~/.config/fish/config.fish
   :END:

   Every source I've found says that =set -e= should just erase the ~fish_greeting~ variable, but for whatever reason I could never get it to stick. At least setting it to an empty string works.

   #+BEGIN_SRC fish
set -x fish_greeting ''
   #+END_SRC

   Interactive-only settings. Direnv is only activated in interactive shells in order to prevent some odd errors I've run into with Emacs. I only set up aliases in interactive shells because I don't see much use for them when fish is just going to run a subprocess.

   #+BEGIN_SRC fish
if status --is-interactive
    direnv hook fish | source

    alias directories 'ls -d */'
    alias serve 'python -m SimpleHTTPServer'
    alias ql 'qlmanage -p'

    if which hub >/dev/null
        alias git 'hub'
    end
end
   #+END_SRC

   I keep an untracked local file for random environment variables. A variable like ~RUST_SRC_PATH~ needs to point at =rustup='s installed Rust source for =racer= autocompletion to work, but the path contains platform and architecture specific information that wouldn't make sense on another machine.

   #+BEGIN_SRC fish
source ~/.fishlocal
   #+END_SRC

   And finally, rarely used these days, but in case I want a local file for secrets.

   #+BEGIN_SRC fish
test -e $HOME/.secretenv.fish
and source $HOME/.secretenv.fish
   #+END_SRC

** Fisherman
   Install =fisherman=.

#+BEGIN_SRC sh :results silent
curl -Lo ~/.config/fish/functions/fisher.fish --create-dirs https://git.io/fisher
#+END_SRC

   Plugins I have installed through Fisherman.

   #+BEGIN_SRC conf :tangle ~/.config/fish/fishfile
fisherman/done
fisherman/free
fisherman/getopts
fisherman/humanize_duration
fisherman/imgcat
fisherman/paths
fisherman/pyenv
fisherman/rbenv
fisherman/termcolours
fisherman/transfer
oh-my-fish/plugin-thefuck
   #+END_SRC

** Prompt
   :PROPERTIES:
   :header-args: :tangle ~/.config/fish/functions/fish_prompt.fish
   :END:

   I originally based this prompt on the one used by YouTube user jekor in his Haskell videos. He also has a bunch of Emacs videos which I still haven't watched, mostly because at the time I was still using Vim.

   #+BEGIN_SRC fish
function fish_prompt --description "Prompt, based on jekor's"
   #+END_SRC

   The very first thing I have to do is capture the last command's exit status, otherwise it'll be rewritten by fish's ~set~ command.

   #+BEGIN_SRC fish
    set last_status $status
   #+END_SRC

   Set up some human names for colours used in the prompt, and stops me from fussing about whether the current working directory should be green or blue.

   #+BEGIN_SRC fish
    set color_good       (set_color green)
    set color_maybe      (set_color yellow)
    set color_bad        (set_color red)
    # set color_user       (set_color green)
    set color_cwd        (set_color blue)
    set color_venv       (set_color magenta)
    set color_char       (set_color yellow)
    set color_git_branch (set_color cyan)
    set color_git_dirty  (set_color red)
    set color_git_staged (set_color yellow)
   #+END_SRC

   Gives me a nice green checkmark if a command exits normally, or else a red cross with the exit status. Sometimes it's useful to have a command's exit status for debugging, but mostly this is just pretty.

   #+BEGIN_SRC fish
    if test $last_status -eq 0
        set prompt_status "$color_good"✓" "
    else
        set prompt_status "$color_bad"✗" $last_status "
    end
   #+END_SRC

   I actually removed the user segment from my prompt at some point, so there's no reason for this to be defined unless I want to bring that segment back. Having the user in the prompt is useful for remote sessions so I might bring it back when I do more SSHing.

   #+BEGIN_SRC fish
    # set prompt_user $color_user(whoami)' '
   #+END_SRC

   Get the git status segment from fish, and add a segment if there's a Python virtual environment active.

   #+BEGIN_SRC fish
    set prompt_git (__fish_git_prompt '(%s) ')

    set prompt_venv ''
    if set -q VIRTUAL_ENV
      set prompt_venv (printf '%s[%s] ' $color_venv (basename $VIRTUAL_ENV))
    end
   #+END_SRC

   Prompt characters are a funny thing. I'm sure there's history behind ~$~ and ~#~ I'm not aware of, but I like lambda for its programming roots even if I sometimes get questions about having the Half Life logo in my terminal. Also: Unicode, baby.

   #+BEGIN_SRC fish
    set prompt_char "$color_char"λ' '
   #+END_SRC

   Do our final construction and emit the prompt string. We've seen everything but ~pwd_trunc.py~, which is a small Python 2 script I wrote forever ago that removes excess directories from the current working directory in order to keep the prompt short. Once you're more than three directories deep any intervening directories between the first and the last two will be replaced with ellipsis.

   #+BEGIN_SRC fish
    echo -n -s $prompt_status \
    $color_cwd(pwd_trunc.py) ' ' $prompt_git \
    $prompt_venv $prompt_char (set_color normal)

end
   #+END_SRC

*** Git Customization
    These are hideous to read, but they're used by fish's built in git prompt function, and it's ultimately easier to customize them instead of writing our own function to read git status. The double underscores probably indicate that these variables are meant to be private, but at the time I wrote my prompt every example prompt I looked at was customizing these.

    #+BEGIN_SRC fish
set -g __fish_git_prompt_hide_untrackedfiles 1
set -g __fish_git_prompt_show_informative_status 1
set -g __fish_git_prompt_showupstream "informative"

set -g __fish_git_prompt_char_cleanstate ""
set -g __fish_git_prompt_char_conflictedstate "✗"
set -g __fish_git_prompt_char_dirtystate "+"
set -g __fish_git_prompt_char_stagedstate "~"
set -g __fish_git_prompt_char_stateseparator ""
set -g __fish_git_prompt_char_untrackedfiles "…"
set -g __fish_git_prompt_char_upstream_ahead "↑"
set -g __fish_git_prompt_char_upstream_behind "↓"
set -g __fish_git_prompt_char_upstream_prefix ""

set -g __fish_git_prompt_color_branch magenta
set -g __fish_git_prompt_color_cleanstate green
set -g __fish_git_prompt_color_dirtystate blue
set -g __fish_git_prompt_color_invalidstate red
set -g __fish_git_prompt_color_stagedstate yellow
set -g __fish_git_prompt_color_untrackedfiles $fish_color_normal
    #+END_SRC

** Functions
*** npmx

    Evaluate a command with a project's =node_modules/.bin= directory in the ~PATH~.

    #+BEGIN_SRC fish :tangle ~/.config/fish/functions/npmx.fish
function npmx
    set PATH (npm bin) $PATH
    eval $argv
end
    #+END_SRC

** Environment

   Fish has an excellent plugin through =fisherman= called =paths= for managing environment variables. Anything in the =~/.config/fish/paths.d= directory will create or append to an environment variable, so you don't have to have a long list of variable exports in your config files. Most of these are for a macOS platform since that's what I'm on, I'll have to come back through and script these correctly in the future.

*** Tools and Directories

    =BROWSER=

   #+BEGIN_SRC conf :tangle ~/.config/fish/paths.d/BROWSER
open
   #+END_SRC

   =EDITOR=

   #+BEGIN_SRC conf :tangle ~/.config/fish/paths.d/EDITOR
emacsclient -c
   #+END_SRC

   =PAGER=

   #+BEGIN_SRC conf :tangle ~/.config/fish/paths.d/PAGER
less
   #+END_SRC

   =TERM=

   #+BEGIN_SRC conf :tangle ~/.config/fish/paths.d/TERM
xterm-256color
   #+END_SRC

   =VISUAL=

   #+BEGIN_SRC conf :tangle ~/.config/fish/paths.d/VISUAL
emacsclient -c
   #+END_SRC

   =PROJECTS=

   #+BEGIN_SRC conf :tangle ~/.config/fish/paths.d/PROJECTS
/Users/csand/code
   #+END_SRC

*** PATH

   #+BEGIN_SRC conf :tangle ~/.config/fish/paths.d/PATH/cargo-bin
/Users/csand/.cargo/bin
   #+END_SRC

   #+BEGIN_SRC conf :tangle ~/.config/fish/paths.d/PATH/home-bin
/Users/csand/bin
   #+END_SRC

*** Python

    Set up =virtualenv= directories.

   #+BEGIN_SRC conf :tangle ~/.config/fish/paths.d/PIP_VIRTUALENV_BASE
/Users/csand/.virtualenvs
   #+END_SRC

   #+BEGIN_SRC conf :tangle ~/.config/fish/paths.d/WORKON_HOME
/Users/csand/.virtualenvs
   #+END_SRC

    Makes =pip= respect the active virtual environment instead of installing to the global =site-packages=.

   #+BEGIN_SRC conf :tangle ~/.config/fish/paths.d/PIP_RESPECT_VIRTUALENV
true
   #+END_SRC

   Disable the default =virtualenv= prompt.

   #+BEGIN_SRC conf :tangle ~/.config/fish/paths.d/VIRTUAL_ENV_DISABLE_PROMPT
true
   #+END_SRC

*** Ruby

    =RBENV_ROOT=

   #+BEGIN_SRC conf :tangle ~/.config/fish/paths.d/RBENV_ROOT
/usr/local/var/rbenv
   #+END_SRC

*** Android

    =ANDROID_HOME=

   #+BEGIN_SRC conf :tangle ~/.config/fish/paths.d/ANDROID_HOME
/usr/local/opt/android-sdk
   #+END_SRC


# Indentation in src blocks will be messed up without this
# Local Variables:
# org-src-preserve-indentation: t
# End:

* Spacemacs
** Install Spacemacs

   #+BEGIN_SRC sh :results silent
git clone https://github.com/syl20bnr/spacemacs ~/.emacs.d
   #+END_SRC

** .spacemacs
   :PROPERTIES:
   :header-args: :tangle ~/.spacemacs
   :END:

   TODO Document this thing.

   #+BEGIN_SRC emacs-lisp
     ;; -*- mode: emacs-lisp -*-
     ;; This file is loaded by Spacemacs at startup.
     ;; It must be stored in your home directory.

     (defun dotspacemacs/layers ()
       "Configuration Layers declaration.
     You should not put any user code in this function besides modifying the variable
     values."
       (setq-default
        ;; Base distribution to use. This is a layer contained in the directory
        ;; `+distribution'. For now available distributions are `spacemacs-base'
        ;; or `spacemacs'. (default 'spacemacs)
        dotspacemacs-distribution 'spacemacs
        ;; Lazy installation of layers (i.e. layers are installed only when a file
        ;; with a supported type is opened). Possible values are `all', `unused'
        ;; and `nil'. `unused' will lazy install only unused layers (i.e. layers
        ;; not listed in variable `dotspacemacs-configuration-layers'), `all' will
        ;; lazy install any layer that support lazy installation even the layers
        ;; listed in `dotspacemacs-configuration-layers'. `nil' disable the lazy
        ;; installation feature and you have to explicitly list a layer in the
        ;; variable `dotspacemacs-configuration-layers' to install it.
        ;; (default 'unused)
        dotspacemacs-enable-lazy-installation 'unused
        ;; If non-nil then Spacemacs will ask for confirmation before installing
        ;; a layer lazily. (default t)
        dotspacemacs-ask-for-lazy-installation t
        ;; If non-nil layers with lazy install support are lazy installed.
        ;; List of additional paths where to look for configuration layers.
        ;; Paths must have a trailing slash (i.e. `~/.mycontribs/')
        dotspacemacs-configuration-layer-path '()
        ;; List of configuration layers to load.
        dotspacemacs-configuration-layers '(
                                            auto-completion
                                            better-defaults
                                            csharp
                                            dash
                                            deft
                                            elixir
                                            emacs-lisp
                                            evil-commentary
                                            git
                                            github
                                            go
                                            helm
                                            html
                                            javascript
                                            markdown
                                            nginx
                                            org
                                            osx
                                            pandoc
                                            python
                                            racket
                                            ranger
                                            restclient
                                            (ruby :variables
                                                  ruby-version-manager 'rbenv
                                                  ruby-test-runner 'rspec)
                                            ruby-on-rails
                                            rust
                                            (shell :variables
                                                   shell-default-shell 'eshell)
                                            shell-scripts
                                            spell-checking
                                            syntax-checking
                                            themes-megapack
                                            typescript
                                            version-control
                                            vimscript
                                            vinegar
                                            yaml
                                            )
        ;; List of additional packages that will be installed without being
        ;; wrapped in a layer. If you need some configuration for these
        ;; packages, then consider creating a layer. You can also put the
        ;; configuration in `dotspacemacs/user-config'.
        dotspacemacs-additional-packages '(
                                           base16-theme
                                           editorconfig
                                           evil-smartparens
                                           key-chord
                                           writeroom-mode
                                           zerodark-theme
                                           )
        ;; A list of packages that cannot be updated.
        dotspacemacs-frozen-packages '()
        ;; A list of packages that will not be installed and loaded.
        dotspacemacs-excluded-packages '()
        ;; Defines the behaviour of Spacemacs when installing packages.
        ;; Possible values are `used-only', `used-but-keep-unused' and `all'.
        ;; `used-only' installs only explicitly used packages and uninstall any
        ;; unused packages as well as their unused dependencies.
        ;; `used-but-keep-unused' installs only the used packages but won't uninstall
        ;; them if they become unused. `all' installs *all* packages supported by
        ;; Spacemacs and never uninstall them. (default is `used-only')
        dotspacemacs-install-packages 'used-only
        ))

     (defun dotspacemacs/init ()
       "Initialization function.
     This function is called at the very startup of Spacemacs initialization
     before layers configuration.
     You should not put any user code in there besides modifying the variable
     values."
       ;; This setq-default sexp is an exhaustive list of all the supported
       ;; spacemacs settings.
       (setq-default
        ;; If non nil ELPA repositories are contacted via HTTPS whenever it's
        ;; possible. Set it to nil if you have no way to use HTTPS in your
        ;; environment, otherwise it is strongly recommended to let it set to t.
        ;; This variable has no effect if Emacs is launched with the parameter
        ;; `--insecure' which forces the value of this variable to nil.
        ;; (default t)
        dotspacemacs-elpa-https t
        ;; Maximum allowed time in seconds to contact an ELPA repository.
        dotspacemacs-elpa-timeout 5
        ;; If non nil then spacemacs will check for updates at startup
        ;; when the current branch is not `develop'. Note that checking for
        ;; new versions works via git commands, thus it calls GitHub services
        ;; whenever you start Emacs. (default nil)
        dotspacemacs-check-for-update nil
        ;; If non-nil, a form that evaluates to a package directory. For example, to
        ;; use different package directories for different Emacs versions, set this
        ;; to `emacs-version'.
        dotspacemacs-elpa-subdirectory nil
        ;; One of `vim', `emacs' or `hybrid'.
        ;; `hybrid' is like `vim' except that `insert state' is replaced by the
        ;; `hybrid state' with `emacs' key bindings. The value can also be a list
        ;; with `:variables' keyword (similar to layers). Check the editing styles
        ;; section of the documentation for details on available variables.
        ;; (default 'vim)
        dotspacemacs-editing-style 'vim
        ;; If non nil output loading progress in `*Messages*' buffer. (default nil)
        dotspacemacs-verbose-loading nil
        ;; Specify the startup banner. Default value is `official', it displays
        ;; the official spacemacs logo. An integer value is the index of text
        ;; banner, `random' chooses a random text banner in `core/banners'
        ;; directory. A string value must be a path to an image format supported
        ;; by your Emacs build.
        ;; If the value is nil then no banner is displayed. (default 'official)
        dotspacemacs-startup-banner 'official
        ;; List of items to show in startup buffer or an association list of
        ;; the form `(list-type . list-size)`. If nil then it is disabled.
        ;; Possible values for list-type are:
        ;; `recents' `bookmarks' `projects' `agenda' `todos'."
        ;; List sizes may be nil, in which case
        ;; `spacemacs-buffer-startup-lists-length' takes effect.
        dotspacemacs-startup-lists '((recents . 5)
                                     (projects . 7))
        ;; True if the home buffer should respond to resize events.
        dotspacemacs-startup-buffer-responsive t
        ;; Default major mode of the scratch buffer (default `text-mode')
        dotspacemacs-scratch-mode 'text-mode
        ;; List of themes, the first of the list is loaded when spacemacs starts.
        ;; Press <SPC> T n to cycle to the next theme in the list (works great
        ;; with 2 themes variants, one dark and one light)
        dotspacemacs-themes '(
                              spacemacs-light
                              spacemacs-dark
                              leuven
                              dracula
                              smyx
                              )
        ;; If non nil the cursor color matches the state color in GUI Emacs.
        dotspacemacs-colorize-cursor-according-to-state t
        ;; Default font, or prioritized list of fonts. `powerline-scale' allows to
        ;; quickly tweak the mode-line size to make separators look not too crappy.
        dotspacemacs-default-font '("Menlo"
                                    :size 12
                                    :weight normal
                                    :width normal
                                    :powerline-scale 1.2
                                    )
        ;; The leader key
        dotspacemacs-leader-key "SPC"
        ;; The leader key accessible in `emacs state' and `insert state'
        ;; (default "M-m")
        dotspacemacs-emacs-leader-key "M-m"
        ;; Major mode leader key is a shortcut key which is the equivalent of
        ;; pressing `<leader> m`. Set it to `nil` to disable it. (default ",")
        dotspacemacs-major-mode-leader-key ","
        ;; Major mode leader key accessible in `emacs state' and `insert state'.
        ;; (default "C-M-m)
        dotspacemacs-major-mode-emacs-leader-key "C-M-m"
        ;; The key used for Emacs commands (M-x) (after pressing on the leader key).
        ;; (default "SPC")
        dotspacemacs-emacs-command-key "SPC"
        ;; These variables control whether separate commands are bound in the GUI to
        ;; the key pairs C-i, TAB and C-m, RET.
        ;; Setting it to a non-nil value, allows for separate commands under <C-i>
        ;; and TAB or <C-m> and RET.
        ;; In the terminal, these pairs are generally indistinguishable, so this only
        ;; works in the GUI. (default nil)
        dotspacemacs-distinguish-gui-tab nil
        ;; If non nil `Y' is remapped to `y$' in Evil states. (default nil)
        dotspacemacs-remap-Y-to-y$ t
        ;; If non-nil, the shift mappings `<' and `>' retain visual state if used
        ;; there. (default t)
        dotspacemacs-retain-visual-state-on-shift t
        ;; If non-nil, J and K move lines up and down when in visual mode.
        ;; (default nil)
        dotspacemacs-visual-line-move-text t
        ;; If non nil, inverse the meaning of `g' in `:substitute' Evil ex-command.
        ;; (default nil)
        dotspacemacs-ex-substitute-global nil
        ;; Name of the default layout (default "Default")
        dotspacemacs-default-layout-name "Default"
        ;; If non nil the default layout name is displayed in the mode-line.
        ;; (default nil)
        dotspacemacs-display-default-layout nil
        ;; If non nil then the last auto saved layouts are resume automatically upon
        ;; start. (default nil)
        dotspacemacs-auto-resume-layouts nil
        ;; Size (in MB) above which spacemacs will prompt to open the large file
        ;; literally to avoid performance issues. Opening a file literally means that
        ;; no major mode or minor modes are active. (default is 1)
        dotspacemacs-large-file-size 1
        ;; Location where to auto-save files. Possible values are `original' to
        ;; auto-save the file in-place, `cache' to auto-save the file to another
        ;; file stored in the cache directory and `nil' to disable auto-saving.
        ;; (default 'cache)
        dotspacemacs-auto-save-file-location nil
        ;; Maximum number of rollback slots to keep in the cache. (default 5)
        dotspacemacs-max-rollback-slots 5
        ;; If non nil, `helm' will try to minimize the space it uses. (default nil)
        dotspacemacs-helm-resize nil
        ;; if non nil, the helm header is hidden when there is only one source.
        ;; (default nil)
        dotspacemacs-helm-no-header nil
        ;; define the position to display `helm', options are `bottom', `top',
        ;; `left', or `right'. (default 'bottom)
        dotspacemacs-helm-position 'bottom
        ;; Controls fuzzy matching in helm. If set to `always', force fuzzy matching
        ;; in all non-asynchronous sources. If set to `source', preserve individual
        ;; source settings. Else, disable fuzzy matching in all sources.
        ;; (default 'always)
        dotspacemacs-helm-use-fuzzy 'always
        ;; If non nil the paste micro-state is enabled. When enabled pressing `p`
        ;; several times cycle between the kill ring content. (default nil)
        dotspacemacs-enable-paste-transient-state nil
        ;; Which-key delay in seconds. The which-key buffer is the popup listing
        ;; the commands bound to the current keystroke sequence. (default 0.4)
        dotspacemacs-which-key-delay 0.4
        ;; Which-key frame position. Possible values are `right', `bottom' and
        ;; `right-then-bottom'. right-then-bottom tries to display the frame to the
        ;; right; if there is insufficient space it displays it at the bottom.
        ;; (default 'bottom)
        dotspacemacs-which-key-position 'bottom
        ;; If non nil a progress bar is displayed when spacemacs is loading. This
        ;; may increase the boot time on some systems and emacs builds, set it to
        ;; nil to boost the loading time. (default t)
        dotspacemacs-loading-progress-bar t
        ;; If non nil the frame is fullscreen when Emacs starts up. (default nil)
        ;; (Emacs 24.4+ only)
        dotspacemacs-fullscreen-at-startup nil
        ;; If non nil `spacemacs/toggle-fullscreen' will not use native fullscreen.
        ;; Use to disable fullscreen animations in OSX. (default nil)
        dotspacemacs-fullscreen-use-non-native nil
        ;; If non nil the frame is maximized when Emacs starts up.
        ;; Takes effect only if `dotspacemacs-fullscreen-at-startup' is nil.
        ;; (default nil) (Emacs 24.4+ only)
        dotspacemacs-maximized-at-startup t
        ;; A value from the range (0..100), in increasing opacity, which describes
        ;; the transparency level of a frame when it's active or selected.
        ;; Transparency can be toggled through `toggle-transparency'. (default 90)
        dotspacemacs-active-transparency 90
        ;; A value from the range (0..100), in increasing opacity, which describes
        ;; the transparency level of a frame when it's inactive or deselected.
        ;; Transparency can be toggled through `toggle-transparency'. (default 90)
        dotspacemacs-inactive-transparency 90
        ;; If non nil show the titles of transient states. (default t)
        dotspacemacs-show-transient-state-title t
        ;; If non nil show the color guide hint for transient state keys. (default t)
        dotspacemacs-show-transient-state-color-guide t
        ;; If non nil unicode symbols are displayed in the mode line. (default t)
        dotspacemacs-mode-line-unicode-symbols t
        ;; If non nil smooth scrolling (native-scrolling) is enabled. Smooth
        ;; scrolling overrides the default behavior of Emacs which recenters point
        ;; when it reaches the top or bottom of the screen. (default t)
        dotspacemacs-smooth-scrolling t
        ;; If non nil line numbers are turned on in all `prog-mode' and `text-mode'
        ;; derivatives. If set to `relative', also turns on relative line numbers.
        ;; (default nil)
        dotspacemacs-line-numbers nil
        ;; Code folding method. Possible values are `evil' and `origami'.
        ;; (default 'evil)
        dotspacemacs-folding-method 'evil
        ;; If non-nil smartparens-strict-mode will be enabled in programming modes.
        ;; (default nil)
        dotspacemacs-smartparens-strict-mode t
        ;; If non-nil pressing the closing parenthesis `)' key in insert mode passes
        ;; over any automatically added closing parenthesis, bracket, quote, etc…
        ;; This can be temporary disabled by pressing `C-q' before `)'. (default nil)
        dotspacemacs-smart-closing-parenthesis t
        ;; Select a scope to highlight delimiters. Possible values are `any',
        ;; `current', `all' or `nil'. Default is `all' (highlight any scope and
        ;; emphasis the current one). (default 'all)
        dotspacemacs-highlight-delimiters 'all
        ;; If non nil, advise quit functions to keep server open when quitting.
        ;; (default nil)
        dotspacemacs-persistent-server t
        ;; List of search tool executable names. Spacemacs uses the first installed
        ;; tool of the list. Supported tools are `ag', `pt', `ack' and `grep'.
        ;; (default '("ag" "pt" "ack" "grep"))
        dotspacemacs-search-tools '("ag" "pt" "ack" "grep")
        ;; The default package repository used if no explicit repository has been
        ;; specified with an installed package.
        ;; Not used for now. (default nil)
        dotspacemacs-default-package-repository nil
        ;; Delete whitespace while saving buffer. Possible values are `all'
        ;; to aggressively delete empty line and long sequences of whitespace,
        ;; `trailing' to delete only the whitespace at end of lines, `changed'to
        ;; delete only whitespace for changed lines or `nil' to disable cleanup.
        ;; (default nil)
        dotspacemacs-whitespace-cleanup 'trailing
        ))

     (defun dotspacemacs/user-init ()
       "Initialization function for user code.
     It is called immediately after `dotspacemacs/init', before layer configuration
     executes.
      This function is mostly useful for variables that need to be set
     before packages are loaded. If you are unsure, you should try in setting them in
     `dotspacemacs/user-config' first."
       (setq-default
        custom-file "~/.spacemacs.d/custom.el"
        git-magit-status-fullscreen t
        )
       )

     (defun dotspacemacs/user-config ()
       "Configuration function for user code.
     This function is called at the very end of Spacemacs initialization after
     layers configuration.
     This is the place where most of your configurations should be done. Unless it is
     explicitly specified that a variable should be set before a package is loaded,
     you should place your code here."

       ;; Give typefaces more breathing room
       (setq-default line-spacing 2)

       ;; Set bold faces to normal
       ;; (mapc
       ;;  (lambda (face)
       ;;    (if (equal (face-attribute face :weight) 'bold)
       ;;        (set-face-attribute face nil :weight 'normal)))
       ;;  (face-list))

       ;; Disable lock files
       (setq-default create-lockfiles nil)

       ;; Disable wrapping when opening a file
       ;; (add-hook 'hack-local-variables-hook (lambda () (setq truncate-lines t)))

       ;; Visual wordwrap in all text modes
       (add-hook 'text-mode-hook 'turn-on-visual-line-mode)

       ;; Evil Smartparens
       (add-hook 'smartparens-enabled-hook #'evil-smartparens-mode)

       ;; Editorconfig
       (editorconfig-mode t)
       (add-to-list 'spacemacs--diminished-minor-modes '(editorconfig-mode " ⓔ" "EC"))

       ;; Orgmode
       (setq-default org-directory "~/Dropbox/Org")
       (setq-default org-default-notes-file (concat org-directory "/inbox.org")
                     org-agenda-files (concat org-directory "/agenda.org")
                     )
       (setq org-capture-templates
             '(("g" "Groceries" checkitem (file+headline "groceries.org" "Next"))
               ("b" "Job Application" entry (file "~/jobs.org")
                "* %^{Company Name} :ALIVE:\n  %^{Title}\n  [[%^{URL}][Posting]]\n  Applied %u")
               ))

       ;; Deft
       (setq-default deft-directory "~/Dropbox/Notes"
                     deft-use-filter-string-for-filename t
                     deft-auto-save-interval 0.0 ;; Disable autosaves
                     )

       ;; Activate JSON mode for .jsintrc
       (add-to-list 'auto-mode-alist '("\\.?jshintrc\\'" . json-mode))

       ;; Disable email address recognition in javascript
       (add-hook 'js2-mode-hook (lambda () (goto-address-mode -1)))

       ;; Flycheck is only set up for SASS in Ruby projects
       (remove-hook 'sass-mode-hook 'flycheck-mode)
       (remove-hook 'scss-mode-hook 'flycheck-mode)

       ;; Diminish Alchemist in minor mode list
       (add-to-list 'spacemacs--diminished-minor-modes '(alchemist-mode " ⓐ" "AL"))

       ;; Keybindings

       ;; Enable the jk chord in insert mode
       (key-chord-mode t)
       (key-chord-define evil-insert-state-map  "jk" 'evil-normal-state)

       (define-key evil-normal-state-map (kbd "j") 'evil-next-visual-line)
       (define-key evil-normal-state-map (kbd "k") 'evil-previous-visual-line)

       (evil-define-key 'visual evil-surround-mode-map
         "s" 'evil-substitute
         "S" 'evil-surround-region)
       )
   #+END_SRC

* Git
  :PROPERTIES:
  :header-args: :tangle ~/.gitconfig
  :END:

** User

   User details, pretty self explanatory.

   #+BEGIN_SRC conf
     [user]
       name = Sam Anderson
       email = sam@csand.net

   #+END_SRC

** Core

   #+BEGIN_SRC conf
     [core]
    #+END_SRC

    Naturally, Emacs is my editor.

    #+BEGIN_SRC conf
        editor = emacsclient -c
    #+END_SRC

    The ~core.symlinks~ setting is available for older filesystems that don't support symbolic links. I generally don't work in these environments, so it's safe to set it to always be true.

    #+BEGIN_SRC conf
        symlinks = true
    #+END_SRC

    Don't trust ctime differences between the working tree and the index. If I remember correctly ctime was being modified by ~ember-cli~ or Spotlight and prompted me to change this setting.

    #+BEGIN_SRC conf
        trustctime = false
    #+END_SRC

    I am incredibly picky about whitespace, like most programmers. Yes, tabs are nice because editors can display them differently and you save on bytes, but spaces are common now and ASCII characters are not a hill to die on.

    More specifically, this option configures to display common whitespace errors in diffs. I have it set for trailing spaces, space/tab indent changes, and also using tabs to indent.

    #+BEGIN_SRC conf
        whitespace = trailing-space,space-before-tab,tab-in-indent

    #+END_SRC

** Tools

   TODO Needs to be documented. Also review the media and lfs stuff, not sure I ever use it.

#+BEGIN_SRC conf
  [push]
    default = matching

  [difftool]
    prompt = false

  [mergetool]
    prompt = false

  [prompt]
    showinfo = true

  [pager]
    diff = diff-so-fancy | less --tabs=1,5 -RFX
    show = diff-so-fancy | less --tabs=1,5 -RFX

  [filter "media"]
    clean = git-media-clean %f
    smudge = git-media-smudge %f

  [filter "lfs"]
    clean = git-lfs clean %f
    smudge = git-lfs smudge %f
    required = true

  [url "git@github.com:"]
    insteadOf = "gh:"
    insteadOf = "git://github.com"
    pushInsteadOf = "github:"
    pushInsteadOf = "git://github.com/"
    pushInsteadOf = "https://github.com/"

#+END_SRC

** Colors

   TODO Needs to be documented

   #+BEGIN_SRC conf
     [color]
       diff = auto
       status = auto
       branch = auto
       interactive = auto
       ui = auto

     [color "diff"]
       meta = yellow bold
       commit = green bold
       frag = magenta bold
       old = red bold
       new = green bold
       whitespace = red reverse

     [color "diff-highlight"]
       oldNormal = red bold
       oldHighlight = "red bold 52"
       newNormal = "green bold"
       newHighlight = "green bold 22"

     [color "branch"]
       current = yellow reverse
       local = yellow
       remote = green

     [color "status"]
       added = yellow
       changed = green
       untracked = cyan
   #+END_SRC

** Aliases

   TODO Needs to be documented, and also pruned cause holy shit there are a lot of these.

   #+BEGIN_SRC conf
     [alias]
       amend = commit --amend
       bd = branch -d
       bm = branch --merged
       branches = branch -a
       branchname = rev-parse --abbrev-ref HEAD
       bv = branch -v
       cb = checkout -b
       cm = commit -m
       co = checkout
       delete = branch -d
       discard = checkout --
       graph = log --graph -10 --branches --remotes --tags --format=format:'%Cgreen%h %Creset• %<(75,trunc)%s (%cN, %cr) %Cred%d' --date-order
       history = log --pretty=format:\"%h %ad | %s%d [%an]\" --graph --date=short
       index = diff --cached
       l = log --pretty=format:\"%h | %s%d\" --graph
       merged = branch --merged
       name = rev-parse --abbrev-ref HEAD
       p = pull
       pr = pull-request
       precommit = diff --cached --diff-algorithm=minimal -w
       prune = remote prune origin
       rbc = rebase --continue
       remotes = remote -v
       rename = branch -m
       s = status
       slog = log --pretty=format:\"%C(green)%h %C(blue)%ad %C(yellow)[%C(magenta)%an%C(yellow)] %Creset%s\" --date=short
       stashes = stash list
       tags = tag
       uncommit = reset --mixed HEAD~
       unmerged = diff --name-only --diff-filter=U
       unstage = reset -q HEAD --
   #+END_SRC
